import streamlit as st
from datetime import date, datetime
import pandas as pd
import csv
import os

# Function to save truck data to CSV
def save_truck_to_csv(phone, truck_type, capacity_tons, capacity_m3, locations):
    """Save truck posting data to CSV file"""
    csv_file = "truck_posts.csv"
    
    # Prepare data for CSV
    submission_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    locations_str = ", ".join(locations) if locations else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    # Check if file exists to determine if we need to write headers
    file_exists = os.path.exists(csv_file)
    
    # Write data to CSV
    with open(csv_file, 'a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        
        # Write headers if file doesn't exist
        if not file_exists:
            writer.writerow(['phone', 'truck_type', 'capacity_tons', 'capacity_m3', 'locations', 'submission_date'])
        
        # Write data row
        writer.writerow([phone, truck_type, capacity_tons, capacity_m3, locations_str, submission_date])

# Function to load and display existing truck posts
def load_truck_posts():
    """Load existing truck posts from CSV and return as DataFrame"""
    csv_file = "truck_posts.csv"
    if os.path.exists(csv_file):
        try:
            df = pd.read_csv(csv_file, encoding='utf-8')
            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

st.set_page_config(page_title="–ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤", layout="centered")
st.title("üöõ –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤")
st.markdown("–ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–∑—ã –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å–≤–æ–π –≥—Ä—É–∑–æ–≤–∏–∫.")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
menu = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["üîç –ù–∞–π—Ç–∏ –≥—Ä—É–∑", "üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑–æ–≤–∏–∫", "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π"])

if menu == "üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑–æ–≤–∏–∫":
    st.header("üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑–æ–≤–∏–∫")
    with st.form("post_truck_form"):
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", value="+998 ", placeholder="+998 90 123 45 67")
        truck_type = st.selectbox("–¢–∏–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞", [
    "–ö–∞–º–∞–∑",
    "–ó–ò–õ",
    "Man",
    "–ö—Ä–∞–Ω",
    "–ë–æ—Ä—Ç–æ–≤–æ–π –≥—Ä—É–∑–æ–≤–∏–∫",
    "–ê–≤—Ç–æ–±–µ—Ç–æ–Ω–æ—Å–º–µ—Å–∏—Ç–µ–ª—å",
    "–ü–æ–≥—Ä—É–∑—á–∏–∫",
    "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫-–≥—Ä—É–∑–æ–≤–∏–∫",
    "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –ø–æ–≥—Ä—É–∑—á–∏–∫",
    "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä",
    "–°–∞–º–æ—Å–≤–∞–ª",
    "–ê–≤—Ç–æ–∫—Ä–∞–Ω",
    "Howo (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)",
    "Howo 60—Ç",
    "–ë—É–ª—å–¥–æ–∑–µ—Ä—ã",
    "–ú—É—Å–æ—Ä–æ–≤–æ–∑—ã",
    "–¶–µ–º–µ–Ω—Ç–æ–≤–æ–∑ –æ—Ç 12 –¥–æ 40 –∫—É–±",
    "–ë–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å (–∫–æ–±—Ä–∞)",
    "–ë–æ—Ä—Ç–æ–≤–æ–π",
    "–¢–µ–Ω—Ç–æ–≤–∞–Ω–Ω—ã–π",
    "–ì–ê–ó–µ–ª—å",
    "SHACMAN",
    "–®–∞–ª–∞–Ω–¥–∞",
    "SUZU"
])
        # Added two number inputs for capacity (tons and m¬≥)
        col1, col2 = st.columns(2)
        with col1:
            load_capacity_tons = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (—Ç–æ–Ω–Ω—ã)", min_value=0, max_value=60, value=0, step=1, help="–£–∫–∞–∂–∏—Ç–µ –≤ —Ç–æ–Ω–Ω–∞—Ö (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)")
        with col2:
            load_capacity_m3 = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (–º¬≥)", min_value=0, max_value=100, value=0, step=1, help="–£–∫–∞–∂–∏—Ç–µ –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)")
        uzbekistan_regions = [
            "Andijon viloyati",
            "Buxoro viloyati",
            "Farg'ona viloyati",
            "Jizzax viloyati",
            "Namangan viloyati",
            "Navoiy viloyati",
            "Qashqadaryo viloyati",
            "Samarqand viloyati",
            "Sirdaryo viloyati",
            "Surxondaryo viloyati",
            "Toshkent viloyati",
            "Xorazm viloyati",
            "Qoraqalpog'iston Respublikasi",
            "Toshkent shahri"
        ]
        locations = st.multiselect("–ë–∞–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω)", uzbekistan_regions, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤")
        submit_post = st.form_submit_button("‚úÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å")

    if submit_post:
        full_phone = phone if phone.strip() != "+998" else "+998 (–Ω–µ —É–∫–∞–∑–∞–Ω)"
        
        # Save data to CSV
        try:
            save_truck_to_csv(full_phone, truck_type, load_capacity_tons, load_capacity_m3, locations)
            
            # Build capacity string based on user input
            capacity_str = []
            if load_capacity_tons > 0:
                capacity_str.append(f"{load_capacity_tons} —Ç–æ–Ω–Ω")
            if load_capacity_m3 > 0:
                capacity_str.append(f"{load_capacity_m3} –º¬≥")
            capacity_display = ", ".join(capacity_str) if capacity_str else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            st.success(f"‚úÖ –ì—Ä—É–∑–æ–≤–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {truck_type} ({capacity_display}) –¥–æ—Å—Ç—É–ø–µ–Ω –≤ {', '.join(locations) or '–Ω–µ —É–∫–∞–∑–∞–Ω —Ä–µ–≥–∏–æ–Ω'}. –ö–æ–Ω—Ç–∞–∫—Ç: {full_phone}")
            st.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª truck_posts.csv")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.success(f"‚úÖ –ì—Ä—É–∑–æ–≤–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω: {truck_type} ({capacity_display}) –¥–æ—Å—Ç—É–ø–µ–Ω –≤ {', '.join(locations) or '–Ω–µ —É–∫–∞–∑–∞–Ω —Ä–µ–≥–∏–æ–Ω'}. –ö–æ–Ω—Ç–∞–∫—Ç: {full_phone}")

elif menu == "üîç –ù–∞–π—Ç–∏ –≥—Ä—É–∑":
    st.header("üîç –ù–∞–π—Ç–∏ –≥—Ä—É–∑—ã")
    with st.form("find_load_form"):
        truck_type = st.selectbox("–¢–∏–ø –≤–∞—à–µ–≥–æ –≥—Ä—É–∑–æ–≤–∏–∫–∞", [
    "–ö–∞–º–∞–∑",
    "–ó–ò–õ",
    "Man",
    "–ö—Ä–∞–Ω",
    "–ë–æ—Ä—Ç–æ–≤–æ–π –≥—Ä—É–∑–æ–≤–∏–∫",
    "–ê–≤—Ç–æ–±–µ—Ç–æ–Ω–æ—Å–º–µ—Å–∏—Ç–µ–ª—å",
    "–ü–æ–≥—Ä—É–∑—á–∏–∫",
    "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫-–≥—Ä—É–∑–æ–≤–∏–∫",
    "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –ø–æ–≥—Ä—É–∑—á–∏–∫",
    "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä",
    "–°–∞–º–æ—Å–≤–∞–ª",
    "–ê–≤—Ç–æ–∫—Ä–∞–Ω",
    "Howo (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)",
    "Howo 60—Ç",
    "–ë—É–ª—å–¥–æ–∑–µ—Ä—ã",
    "–ú—É—Å–æ—Ä–æ–≤–æ–∑—ã",
    "–¶–µ–º–µ–Ω—Ç–æ–≤–æ–∑ –æ—Ç 12 –¥–æ 40 –∫—É–±",
    "–ë–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å (–∫–æ–±—Ä–∞)",
    "–ë–æ—Ä—Ç–æ–≤–æ–π",
    "–¢–µ–Ω—Ç–æ–≤–∞–Ω–Ω—ã–π",
    "–ì–ê–ó–µ–ª—å",
    "SHACMAN",
    "–®–∞–ª–∞–Ω–¥–∞",
    "SUZU"
])
        load_type = st.selectbox("–ò—â—É –≥—Ä—É–∑", ["–®–∞–≥–∞–ª", "–ü–µ—Å–æ–∫", "–¶–µ–º–µ–Ω—Ç", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–î—Ä—É–≥–æ–µ"])
        uzbekistan_regions = [
            "Andijon viloyati",
            "Buxoro viloyati",
            "Farg'ona viloyati",
            "Jizzax viloyati",
            "Namangan viloyati",
            "Navoiy viloyati",
            "Qashqadaryo viloyati",
            "Samarqand viloyati",
            "Sirdaryo viloyati",
            "Surxondaryo viloyati",
            "Toshkent viloyati",
            "Xorazm viloyati",
            "Qoraqalpog'iston Respublikasi",
            "Toshkent shahri"
        ]
        regions = st.multiselect("–†–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã", uzbekistan_regions, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤")
        search = st.form_submit_button("üîé –ü–æ–∏—Å–∫")

    if search:
        st.success("üéØ –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        st.markdown(f"**ü™® –ì—Ä—É–∑:** {load_type} 15 —Ç–æ–Ω–Ω\n\n**üìç –û—Ç–∫—É–¥–∞:** –ë–µ–∫–∞–±–∞–¥ ‚Üí {', '.join(regions) or '–¢–∞—à–∫–µ–Ω—Ç'}\n\n**üìû –ö–æ–Ω—Ç–∞–∫—Ç:** +998 90 123 45 67")

elif menu == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π":
    st.header("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # Load existing truck posts
    df = load_truck_posts()
    
    if not df.empty:
        st.subheader(f"üìä –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(df)}")
        
        # Display data in a nice table
        st.dataframe(
            df,
            column_config={
                "phone": "üìû –¢–µ–ª–µ—Ñ–æ–Ω",
                "truck_type": "üöõ –¢–∏–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞", 
                "capacity_tons": "‚öñÔ∏è –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (—Ç)",
                "capacity_m3": "üì¶ –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (–º¬≥)",
                "locations": "üìç –†–µ–≥–∏–æ–Ω—ã",
                "submission_date": "üìÖ –î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
            },
            hide_index=True,
            use_container_width=True
        )
        
        # Download button for CSV
        csv_data = df.to_csv(index=False, encoding='utf-8')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
            data=csv_data,
            file_name="truck_posts.csv",
            mime="text/csv"
        )
        
    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
